{"ast":null,"code":"// Note: Ignore unsafe decoding of data\nimport { Price } from './Price';\nexport const Stashpoint = {\n  decode: input => {\n    const [error, bagPerDayPrice] = Price.decode(input.bagPerDayPrice);\n    return error === undefined ? [undefined, { ...input,\n      bagPerDayPrice\n    }] : [error, undefined];\n  },\n  encode: stashpoint => {\n    return { ...stashpoint,\n      bagPerDayPrice: Price.encode(stashpoint.bagPerDayPrice)\n    };\n  }\n};\nexport const Stashpoints = {\n  decode: input => {\n    const stashpoints = [];\n\n    for (const value of input) {\n      const [error, stashpoint] = Stashpoint.decode(value);\n      if (error !== undefined) return [error, undefined];\n      stashpoints.push(stashpoint);\n    }\n\n    return [undefined, stashpoints];\n  },\n  encode: stashpoints => {\n    return stashpoints.map(Stashpoint.encode);\n  }\n};","map":{"version":3,"sources":["/Users/mac/Documents/react app/stasher/src/Data/Stashpoint.ts"],"names":["Price","Stashpoint","decode","input","error","bagPerDayPrice","undefined","encode","stashpoint","Stashpoints","stashpoints","value","push","map"],"mappings":"AAAA;AAEA,SAASA,KAAT,QAAoC,SAApC;AAoBA,OAAO,MAAMC,UAAU,GAAG;AACxBC,EAAAA,MAAM,EACJC,KADM,IAE6D;AACnE,UAAM,CAACC,KAAD,EAAQC,cAAR,IAA0BL,KAAK,CAACE,MAAN,CAAcC,KAAD,CAAeE,cAA5B,CAAhC;AAEA,WAAOD,KAAK,KAAKE,SAAV,GACH,CAACA,SAAD,EAAY,EAAE,GAAIH,KAAN;AAAqBE,MAAAA;AAArB,KAAZ,CADG,GAEH,CAACD,KAAD,EAAQE,SAAR,CAFJ;AAGD,GATuB;AAUxBC,EAAAA,MAAM,EAAGC,UAAD,IAA+C;AACrD,WAAO,EACL,GAAGA,UADE;AAELH,MAAAA,cAAc,EAAEL,KAAK,CAACO,MAAN,CAAaC,UAAU,CAACH,cAAxB;AAFX,KAAP;AAID;AAfuB,CAAnB;AAsBP,OAAO,MAAMI,WAAW,GAAG;AACzBP,EAAAA,MAAM,EACJC,KADM,IAE8D;AACpE,UAAMO,WAAyB,GAAG,EAAlC;;AAEA,SAAK,MAAMC,KAAX,IAAoBR,KAApB,EAAkC;AAChC,YAAM,CAACC,KAAD,EAAQI,UAAR,IAAsBP,UAAU,CAACC,MAAX,CAAkBS,KAAlB,CAA5B;AAEA,UAAIP,KAAK,KAAKE,SAAd,EAAyB,OAAO,CAACF,KAAD,EAAQE,SAAR,CAAP;AAEzBI,MAAAA,WAAW,CAACE,IAAZ,CAAiBJ,UAAjB;AACD;;AAED,WAAO,CAACF,SAAD,EAAYI,WAAZ,CAAP;AACD,GAfwB;AAgBzBH,EAAAA,MAAM,EAAGG,WAAD,IAAkD;AACxD,WAAOA,WAAW,CAACG,GAAZ,CAAgBZ,UAAU,CAACM,MAA3B,CAAP;AACD;AAlBwB,CAApB","sourcesContent":["// Note: Ignore unsafe decoding of data\n\nimport { Price, PriceEncoded } from './Price'\n\nexport type Stashpoint = {\n  readonly address: string\n  readonly bagPerDayPrice: Price\n  readonly currencyCode: string\n  readonly id: string\n  readonly name: string\n  readonly rating: number\n}\n\nexport type StashpointEncoded = {\n  readonly address: string\n  readonly bagPerDayPrice: PriceEncoded\n  readonly currencyCode: string\n  readonly id: string\n  readonly name: string\n  readonly rating: number\n}\n\nexport const Stashpoint = {\n  decode: (\n    input: unknown,\n  ): readonly [Error, undefined] | readonly [undefined, Stashpoint] => {\n    const [error, bagPerDayPrice] = Price.decode((input as any).bagPerDayPrice)\n\n    return error === undefined\n      ? [undefined, { ...(input as any), bagPerDayPrice }]\n      : [error, undefined]\n  },\n  encode: (stashpoint: Stashpoint): StashpointEncoded => {\n    return {\n      ...stashpoint,\n      bagPerDayPrice: Price.encode(stashpoint.bagPerDayPrice),\n    }\n  },\n}\n\nexport type Stashpoints = readonly Stashpoint[]\n\nexport type StashpointsEncoded = readonly StashpointEncoded[]\n\nexport const Stashpoints = {\n  decode: (\n    input: unknown,\n  ): readonly [Error, undefined] | readonly [undefined, Stashpoints] => {\n    const stashpoints: Stashpoint[] = []\n\n    for (const value of input as any) {\n      const [error, stashpoint] = Stashpoint.decode(value)\n\n      if (error !== undefined) return [error, undefined]\n\n      stashpoints.push(stashpoint)\n    }\n\n    return [undefined, stashpoints]\n  },\n  encode: (stashpoints: Stashpoints): StashpointsEncoded => {\n    return stashpoints.map(Stashpoint.encode)\n  },\n}\n"]},"metadata":{},"sourceType":"module"}