{"ast":null,"code":"// Note: Ignore unsafe decoding of data\nimport { DateRange } from './DateRange';\nimport { Price } from './Price';\nexport const PriceQuote = {\n  decode: input => {\n    const [error1, dateRange] = DateRange.decode(input.dateRange);\n    if (error1 !== undefined) return [error1, undefined];\n    const [error2, totalPrice] = Price.decode(input.totalPrice);\n    if (error2 !== undefined) return [error2, undefined];\n    return [undefined, { ...input,\n      dateRange,\n      totalPrice\n    }];\n  },\n  encode: priceQuote => {\n    return { ...priceQuote,\n      dateRange: DateRange.encode(priceQuote.dateRange),\n      totalPrice: Price.encode(priceQuote.totalPrice)\n    };\n  }\n};","map":{"version":3,"sources":["/Users/mac/Documents/react app/stasher/src/Data/PriceQuote.ts"],"names":["DateRange","Price","PriceQuote","decode","input","error1","dateRange","undefined","error2","totalPrice","encode","priceQuote"],"mappings":"AAAA;AAEA,SAASA,SAAT,QAA4C,aAA5C;AACA,SAASC,KAAT,QAAoC,SAApC;AAkBA,OAAO,MAAMC,UAAU,GAAG;AACxBC,EAAAA,MAAM,EACJC,KADM,IAE6D;AACnE,UAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,SAAS,CAACG,MAAV,CAAkBC,KAAD,CAAeE,SAAhC,CAA5B;AAEA,QAAID,MAAM,KAAKE,SAAf,EAA0B,OAAO,CAACF,MAAD,EAASE,SAAT,CAAP;AAE1B,UAAM,CAACC,MAAD,EAASC,UAAT,IAAuBR,KAAK,CAACE,MAAN,CAAcC,KAAD,CAAeK,UAA5B,CAA7B;AAEA,QAAID,MAAM,KAAKD,SAAf,EAA0B,OAAO,CAACC,MAAD,EAASD,SAAT,CAAP;AAE1B,WAAO,CAACA,SAAD,EAAY,EAAE,GAAIH,KAAN;AAAqBE,MAAAA,SAArB;AAAgCG,MAAAA;AAAhC,KAAZ,CAAP;AACD,GAbuB;AAcxBC,EAAAA,MAAM,EAAGC,UAAD,IAA+C;AACrD,WAAO,EACL,GAAGA,UADE;AAELL,MAAAA,SAAS,EAAEN,SAAS,CAACU,MAAV,CAAiBC,UAAU,CAACL,SAA5B,CAFN;AAGLG,MAAAA,UAAU,EAAER,KAAK,CAACS,MAAN,CAAaC,UAAU,CAACF,UAAxB;AAHP,KAAP;AAKD;AApBuB,CAAnB","sourcesContent":["// Note: Ignore unsafe decoding of data\n\nimport { DateRange, DateRangeEncoded } from './DateRange'\nimport { Price, PriceEncoded } from './Price'\n\nexport type PriceQuote = {\n  readonly bagCount: number\n  readonly currencyCode: string\n  readonly dateRange: DateRange\n  readonly stashpointId: string\n  readonly totalPrice: Price\n}\n\nexport type PriceQuoteEncoded = {\n  readonly bagCount: number\n  readonly currencyCode: string\n  readonly dateRange: DateRangeEncoded\n  readonly stashpointId: string\n  readonly totalPrice: PriceEncoded\n}\n\nexport const PriceQuote = {\n  decode: (\n    input: unknown,\n  ): readonly [Error, undefined] | readonly [undefined, PriceQuote] => {\n    const [error1, dateRange] = DateRange.decode((input as any).dateRange)\n\n    if (error1 !== undefined) return [error1, undefined]\n\n    const [error2, totalPrice] = Price.decode((input as any).totalPrice)\n\n    if (error2 !== undefined) return [error2, undefined]\n\n    return [undefined, { ...(input as any), dateRange, totalPrice }]\n  },\n  encode: (priceQuote: PriceQuote): PriceQuoteEncoded => {\n    return {\n      ...priceQuote,\n      dateRange: DateRange.encode(priceQuote.dateRange),\n      totalPrice: Price.encode(priceQuote.totalPrice),\n    }\n  },\n}\n"]},"metadata":{},"sourceType":"module"}