{"ast":null,"code":"import faker from '@faker-js/faker';\nimport { differenceInCalendarDays } from 'date-fns';\nimport { rest } from 'msw';\nimport * as Data from '../Data';\nimport { isBagCountValid, isDateRangeValid } from '../util';\n\nconst generateStashpoint = () => {\n  return {\n    address: faker.address.streetAddress(true),\n    bagPerDayPrice: BigInt(faker.datatype.number({\n      min: 4,\n      max: 7\n    })),\n    currencyCode: 'GBP',\n    id: faker.datatype.uuid(),\n    name: faker.company.companyName(),\n    rating: faker.datatype.number({\n      min: 0,\n      max: 5,\n      precision: 0.1\n    })\n  };\n};\n\nconst generateStashpoints = totalStashpoints => {\n  return Array.from({\n    length: totalStashpoints\n  }).map(generateStashpoint);\n};\n\nconst generatePriceQuote = data => {\n  const {\n    bagCount,\n    dateRange,\n    stashpoint\n  } = data;\n  return {\n    bagCount,\n    currencyCode: stashpoint.currencyCode,\n    dateRange,\n    stashpointId: stashpoint.id,\n    totalPrice: stashpoint.bagPerDayPrice * BigInt(bagCount) * BigInt(differenceInCalendarDays(dateRange.to, dateRange.from))\n  };\n};\n\nconst generateBooking = data => {\n  const {\n    bagCount,\n    dateRange,\n    stashpoint\n  } = data;\n  return {\n    bagCount,\n    currencyCode: stashpoint.currencyCode,\n    dateRange,\n    id: faker.datatype.uuid(),\n    stashpoint: stashpoint,\n    totalPrice: stashpoint.bagPerDayPrice * BigInt(bagCount) * BigInt(differenceInCalendarDays(dateRange.to, dateRange.from))\n  };\n};\n\nconst stashpoints = generateStashpoints(50);\nconst bookings = [];\nexport const devHandlers = [rest.get('/api/stashpoints', (_req, res, ctx) => {\n  return res(ctx.delay('real'), ctx.status(200), ctx.json(Data.Stashpoints.encode(stashpoints)));\n}), rest.post('/api/quotes', (req, res, ctx) => {\n  const {\n    bagCount,\n    dateRange: dateRangeEncoded,\n    stashpointId\n  } = req.body;\n\n  if (!isBagCountValid(bagCount)) {\n    return res(ctx.delay('real'), ctx.status(422), ctx.json({\n      error: {\n        code: 'INVALID_BAG_COUNT'\n      }\n    }));\n  }\n\n  const [error, dateRange] = Data.DateRange.decode(dateRangeEncoded);\n\n  if (error !== undefined || !isDateRangeValid(dateRange)) {\n    return res(ctx.delay('real'), ctx.status(422), ctx.json({\n      error: {\n        code: 'INVALID_DATE_RANGE'\n      }\n    }));\n  }\n\n  const stashpoint = stashpoints.find(_ref => {\n    let {\n      id\n    } = _ref;\n    return id === stashpointId;\n  });\n\n  if (stashpoint === undefined) {\n    return res(ctx.delay('real'), ctx.status(404), ctx.json({\n      error: {\n        code: 'NOT_FOUND'\n      }\n    }));\n  }\n\n  const priceQuote = generatePriceQuote({\n    bagCount,\n    dateRange,\n    stashpoint\n  });\n  return res(ctx.delay('real'), ctx.status(200), ctx.json(Data.PriceQuote.encode(priceQuote)));\n}), rest.post('/api/bookings', (req, res, ctx) => {\n  const {\n    bagCount,\n    dateRange: dateRangeEncoded,\n    stashpointId\n  } = req.body;\n\n  if (!isBagCountValid(bagCount)) {\n    return res(ctx.delay('real'), ctx.status(422), ctx.json({\n      error: {\n        code: 'INVALID_BAG_COUNT'\n      }\n    }));\n  }\n\n  const [error, dateRange] = Data.DateRange.decode(dateRangeEncoded);\n\n  if (error !== undefined || !isDateRangeValid(dateRange)) {\n    return res(ctx.delay('real'), ctx.status(422), ctx.json({\n      error: {\n        code: 'INVALID_DATE_RANGE'\n      }\n    }));\n  }\n\n  const stashpoint = stashpoints.find(_ref2 => {\n    let {\n      id\n    } = _ref2;\n    return id === stashpointId;\n  });\n\n  if (stashpoint === undefined) {\n    return res(ctx.delay('real'), ctx.status(404), ctx.json({\n      error: {\n        code: 'NOT_FOUND'\n      }\n    }));\n  }\n\n  const booking = generateBooking({\n    bagCount,\n    dateRange,\n    stashpoint\n  });\n  bookings.push(booking);\n  return res(ctx.delay('real'), ctx.status(200), ctx.json(Data.Booking.encode(booking)));\n}), rest.post('/api/payments', (req, res, ctx) => {\n  const {\n    bookingId\n  } = req.body;\n  const booking = bookings.find(_ref3 => {\n    let {\n      id\n    } = _ref3;\n    return id === bookingId;\n  });\n\n  if (booking === undefined) {\n    return res(ctx.delay('real'), ctx.status(404), ctx.json({\n      error: {\n        code: 'NOT_FOUND'\n      }\n    }));\n  }\n\n  return res(ctx.delay('real'), ctx.status(200), ctx.json(Data.Payment.encode({\n    id: faker.datatype.uuid()\n  })));\n})];\nexport const testHandlers = [];","map":{"version":3,"sources":["/Users/mac/Documents/react app/stasher/src/mocks/handlers.ts"],"names":["faker","differenceInCalendarDays","rest","Data","isBagCountValid","isDateRangeValid","generateStashpoint","address","streetAddress","bagPerDayPrice","BigInt","datatype","number","min","max","currencyCode","id","uuid","name","company","companyName","rating","precision","generateStashpoints","totalStashpoints","Array","from","length","map","generatePriceQuote","data","bagCount","dateRange","stashpoint","stashpointId","totalPrice","to","generateBooking","stashpoints","bookings","devHandlers","get","_req","res","ctx","delay","status","json","Stashpoints","encode","post","req","dateRangeEncoded","body","error","code","DateRange","decode","undefined","find","priceQuote","PriceQuote","booking","push","Booking","bookingId","Payment","testHandlers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,IAAT,QAAqB,KAArB;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,SAAlD;;AAEA,MAAMC,kBAAkB,GAAG,MAAuB;AAChD,SAAO;AACLC,IAAAA,OAAO,EAAEP,KAAK,CAACO,OAAN,CAAcC,aAAd,CAA4B,IAA5B,CADJ;AAELC,IAAAA,cAAc,EAAEC,MAAM,CAACV,KAAK,CAACW,QAAN,CAAeC,MAAf,CAAsB;AAAEC,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,GAAG,EAAE;AAAf,KAAtB,CAAD,CAFjB;AAGLC,IAAAA,YAAY,EAAE,KAHT;AAILC,IAAAA,EAAE,EAAEhB,KAAK,CAACW,QAAN,CAAeM,IAAf,EAJC;AAKLC,IAAAA,IAAI,EAAElB,KAAK,CAACmB,OAAN,CAAcC,WAAd,EALD;AAMLC,IAAAA,MAAM,EAAErB,KAAK,CAACW,QAAN,CAAeC,MAAf,CAAsB;AAAEC,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,GAAG,EAAE,CAAf;AAAkBQ,MAAAA,SAAS,EAAE;AAA7B,KAAtB;AANH,GAAP;AAQD,CATD;;AAWA,MAAMC,mBAAmB,GAAIC,gBAAD,IAAgD;AAC1E,SAAOC,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEH;AAAV,GAAX,EAAyCI,GAAzC,CAA6CtB,kBAA7C,CAAP;AACD,CAFD;;AAIA,MAAMuB,kBAAkB,GAAIC,IAAD,IAIJ;AACrB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA;AAAvB,MAAsCH,IAA5C;AAEA,SAAO;AACLC,IAAAA,QADK;AAELhB,IAAAA,YAAY,EAAEkB,UAAU,CAAClB,YAFpB;AAGLiB,IAAAA,SAHK;AAILE,IAAAA,YAAY,EAAED,UAAU,CAACjB,EAJpB;AAKLmB,IAAAA,UAAU,EACRF,UAAU,CAACxB,cAAX,GACAC,MAAM,CAACqB,QAAD,CADN,GAEArB,MAAM,CAACT,wBAAwB,CAAC+B,SAAS,CAACI,EAAX,EAAeJ,SAAS,CAACN,IAAzB,CAAzB;AARH,GAAP;AAUD,CAjBD;;AAmBA,MAAMW,eAAe,GAAIP,IAAD,IAIJ;AAClB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA;AAAvB,MAAsCH,IAA5C;AAEA,SAAO;AACLC,IAAAA,QADK;AAELhB,IAAAA,YAAY,EAAEkB,UAAU,CAAClB,YAFpB;AAGLiB,IAAAA,SAHK;AAILhB,IAAAA,EAAE,EAAEhB,KAAK,CAACW,QAAN,CAAeM,IAAf,EAJC;AAKLgB,IAAAA,UAAU,EAAEA,UALP;AAMLE,IAAAA,UAAU,EACRF,UAAU,CAACxB,cAAX,GACAC,MAAM,CAACqB,QAAD,CADN,GAEArB,MAAM,CAACT,wBAAwB,CAAC+B,SAAS,CAACI,EAAX,EAAeJ,SAAS,CAACN,IAAzB,CAAzB;AATH,GAAP;AAWD,CAlBD;;AAoBA,MAAMY,WAAW,GAAGf,mBAAmB,CAAC,EAAD,CAAvC;AAEA,MAAMgB,QAAwB,GAAG,EAAjC;AAEA,OAAO,MAAMC,WAAW,GAAG,CACzBtC,IAAI,CAACuC,GAAL,CACE,kBADF,EAEE,CAACC,IAAD,EAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClB,SAAOD,GAAG,CACRC,GAAG,CAACC,KAAJ,CAAU,MAAV,CADQ,EAERD,GAAG,CAACE,MAAJ,CAAW,GAAX,CAFQ,EAGRF,GAAG,CAACG,IAAJ,CAAS5C,IAAI,CAAC6C,WAAL,CAAiBC,MAAjB,CAAwBX,WAAxB,CAAT,CAHQ,CAAV;AAKD,CARH,CADyB,EAYzBpC,IAAI,CAACgD,IAAL,CAQE,aARF,EAQiB,CAACC,GAAD,EAAMR,GAAN,EAAWC,GAAX,KAAmB;AAClC,QAAM;AAAEb,IAAAA,QAAF;AAAYC,IAAAA,SAAS,EAAEoB,gBAAvB;AAAyClB,IAAAA;AAAzC,MAA0DiB,GAAG,CAACE,IAApE;;AAEA,MAAI,CAACjD,eAAe,CAAC2B,QAAD,CAApB,EAAgC;AAC9B,WAAOY,GAAG,CACRC,GAAG,CAACC,KAAJ,CAAU,MAAV,CADQ,EAERD,GAAG,CAACE,MAAJ,CAAW,GAAX,CAFQ,EAGRF,GAAG,CAACG,IAAJ,CAAS;AAAEO,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAT,KAAT,CAHQ,CAAV;AAKD;;AAED,QAAM,CAACD,KAAD,EAAQtB,SAAR,IAAqB7B,IAAI,CAACqD,SAAL,CAAeC,MAAf,CAAsBL,gBAAtB,CAA3B;;AAEA,MAAIE,KAAK,KAAKI,SAAV,IAAuB,CAACrD,gBAAgB,CAAC2B,SAAD,CAA5C,EAAyD;AACvD,WAAOW,GAAG,CACRC,GAAG,CAACC,KAAJ,CAAU,MAAV,CADQ,EAERD,GAAG,CAACE,MAAJ,CAAW,GAAX,CAFQ,EAGRF,GAAG,CAACG,IAAJ,CAAS;AAAEO,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAT,KAAT,CAHQ,CAAV;AAKD;;AAED,QAAMtB,UAAU,GAAGK,WAAW,CAACqB,IAAZ,CAAiB;AAAA,QAAC;AAAE3C,MAAAA;AAAF,KAAD;AAAA,WAAYA,EAAE,KAAKkB,YAAnB;AAAA,GAAjB,CAAnB;;AAEA,MAAID,UAAU,KAAKyB,SAAnB,EAA8B;AAC5B,WAAOf,GAAG,CACRC,GAAG,CAACC,KAAJ,CAAU,MAAV,CADQ,EAERD,GAAG,CAACE,MAAJ,CAAW,GAAX,CAFQ,EAGRF,GAAG,CAACG,IAAJ,CAAS;AAAEO,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAT,KAAT,CAHQ,CAAV;AAKD;;AAED,QAAMK,UAAU,GAAG/B,kBAAkB,CAAC;AAAEE,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA;AAAvB,GAAD,CAArC;AAEA,SAAOU,GAAG,CACRC,GAAG,CAACC,KAAJ,CAAU,MAAV,CADQ,EAERD,GAAG,CAACE,MAAJ,CAAW,GAAX,CAFQ,EAGRF,GAAG,CAACG,IAAJ,CAAS5C,IAAI,CAAC0D,UAAL,CAAgBZ,MAAhB,CAAuBW,UAAvB,CAAT,CAHQ,CAAV;AAKD,CA9CD,CAZyB,EA4DzB1D,IAAI,CAACgD,IAAL,CAQE,eARF,EAQmB,CAACC,GAAD,EAAMR,GAAN,EAAWC,GAAX,KAAmB;AACpC,QAAM;AAAEb,IAAAA,QAAF;AAAYC,IAAAA,SAAS,EAAEoB,gBAAvB;AAAyClB,IAAAA;AAAzC,MAA0DiB,GAAG,CAACE,IAApE;;AAEA,MAAI,CAACjD,eAAe,CAAC2B,QAAD,CAApB,EAAgC;AAC9B,WAAOY,GAAG,CACRC,GAAG,CAACC,KAAJ,CAAU,MAAV,CADQ,EAERD,GAAG,CAACE,MAAJ,CAAW,GAAX,CAFQ,EAGRF,GAAG,CAACG,IAAJ,CAAS;AAAEO,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAT,KAAT,CAHQ,CAAV;AAKD;;AAED,QAAM,CAACD,KAAD,EAAQtB,SAAR,IAAqB7B,IAAI,CAACqD,SAAL,CAAeC,MAAf,CAAsBL,gBAAtB,CAA3B;;AAEA,MAAIE,KAAK,KAAKI,SAAV,IAAuB,CAACrD,gBAAgB,CAAC2B,SAAD,CAA5C,EAAyD;AACvD,WAAOW,GAAG,CACRC,GAAG,CAACC,KAAJ,CAAU,MAAV,CADQ,EAERD,GAAG,CAACE,MAAJ,CAAW,GAAX,CAFQ,EAGRF,GAAG,CAACG,IAAJ,CAAS;AAAEO,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAT,KAAT,CAHQ,CAAV;AAKD;;AAED,QAAMtB,UAAU,GAAGK,WAAW,CAACqB,IAAZ,CAAiB;AAAA,QAAC;AAAE3C,MAAAA;AAAF,KAAD;AAAA,WAAYA,EAAE,KAAKkB,YAAnB;AAAA,GAAjB,CAAnB;;AAEA,MAAID,UAAU,KAAKyB,SAAnB,EAA8B;AAC5B,WAAOf,GAAG,CACRC,GAAG,CAACC,KAAJ,CAAU,MAAV,CADQ,EAERD,GAAG,CAACE,MAAJ,CAAW,GAAX,CAFQ,EAGRF,GAAG,CAACG,IAAJ,CAAS;AAAEO,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAT,KAAT,CAHQ,CAAV;AAKD;;AAED,QAAMO,OAAO,GAAGzB,eAAe,CAAC;AAAEN,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA;AAAvB,GAAD,CAA/B;AAEAM,EAAAA,QAAQ,CAACwB,IAAT,CAAcD,OAAd;AAEA,SAAOnB,GAAG,CACRC,GAAG,CAACC,KAAJ,CAAU,MAAV,CADQ,EAERD,GAAG,CAACE,MAAJ,CAAW,GAAX,CAFQ,EAGRF,GAAG,CAACG,IAAJ,CAAS5C,IAAI,CAAC6D,OAAL,CAAaf,MAAb,CAAoBa,OAApB,CAAT,CAHQ,CAAV;AAKD,CAhDD,CA5DyB,EA8GzB5D,IAAI,CAACgD,IAAL,CAIE,eAJF,EAImB,CAACC,GAAD,EAAMR,GAAN,EAAWC,GAAX,KAAmB;AACpC,QAAM;AAAEqB,IAAAA;AAAF,MAAgBd,GAAG,CAACE,IAA1B;AAEA,QAAMS,OAAO,GAAGvB,QAAQ,CAACoB,IAAT,CAAc;AAAA,QAAC;AAAE3C,MAAAA;AAAF,KAAD;AAAA,WAAYA,EAAE,KAAKiD,SAAnB;AAAA,GAAd,CAAhB;;AAEA,MAAIH,OAAO,KAAKJ,SAAhB,EAA2B;AACzB,WAAOf,GAAG,CACRC,GAAG,CAACC,KAAJ,CAAU,MAAV,CADQ,EAERD,GAAG,CAACE,MAAJ,CAAW,GAAX,CAFQ,EAGRF,GAAG,CAACG,IAAJ,CAAS;AAAEO,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAT,KAAT,CAHQ,CAAV;AAKD;;AAED,SAAOZ,GAAG,CACRC,GAAG,CAACC,KAAJ,CAAU,MAAV,CADQ,EAERD,GAAG,CAACE,MAAJ,CAAW,GAAX,CAFQ,EAGRF,GAAG,CAACG,IAAJ,CAAS5C,IAAI,CAAC+D,OAAL,CAAajB,MAAb,CAAoB;AAAEjC,IAAAA,EAAE,EAAEhB,KAAK,CAACW,QAAN,CAAeM,IAAf;AAAN,GAApB,CAAT,CAHQ,CAAV;AAKD,CAtBD,CA9GyB,CAApB;AAuIP,OAAO,MAAMkD,YAAY,GAAG,EAArB","sourcesContent":["import faker from '@faker-js/faker'\nimport { differenceInCalendarDays } from 'date-fns'\nimport { rest } from 'msw'\nimport * as Data from '../Data'\nimport { isBagCountValid, isDateRangeValid } from '../util'\n\nconst generateStashpoint = (): Data.Stashpoint => {\n  return {\n    address: faker.address.streetAddress(true),\n    bagPerDayPrice: BigInt(faker.datatype.number({ min: 4, max: 7 })),\n    currencyCode: 'GBP',\n    id: faker.datatype.uuid(),\n    name: faker.company.companyName(),\n    rating: faker.datatype.number({ min: 0, max: 5, precision: 0.1 }),\n  }\n}\n\nconst generateStashpoints = (totalStashpoints: number): Data.Stashpoints => {\n  return Array.from({ length: totalStashpoints }).map(generateStashpoint)\n}\n\nconst generatePriceQuote = (data: {\n  readonly bagCount: number\n  readonly dateRange: Data.DateRange\n  readonly stashpoint: Data.Stashpoint\n}): Data.PriceQuote => {\n  const { bagCount, dateRange, stashpoint } = data\n\n  return {\n    bagCount,\n    currencyCode: stashpoint.currencyCode,\n    dateRange,\n    stashpointId: stashpoint.id,\n    totalPrice:\n      stashpoint.bagPerDayPrice *\n      BigInt(bagCount) *\n      BigInt(differenceInCalendarDays(dateRange.to, dateRange.from)),\n  }\n}\n\nconst generateBooking = (data: {\n  readonly bagCount: number\n  readonly dateRange: Data.DateRange\n  readonly stashpoint: Data.Stashpoint\n}): Data.Booking => {\n  const { bagCount, dateRange, stashpoint } = data\n\n  return {\n    bagCount,\n    currencyCode: stashpoint.currencyCode,\n    dateRange,\n    id: faker.datatype.uuid(),\n    stashpoint: stashpoint,\n    totalPrice:\n      stashpoint.bagPerDayPrice *\n      BigInt(bagCount) *\n      BigInt(differenceInCalendarDays(dateRange.to, dateRange.from)),\n  }\n}\n\nconst stashpoints = generateStashpoints(50)\n\nconst bookings: Data.Booking[] = []\n\nexport const devHandlers = [\n  rest.get<never, never, Data.StashpointsEncoded>(\n    '/api/stashpoints',\n    (_req, res, ctx) => {\n      return res(\n        ctx.delay('real'),\n        ctx.status(200),\n        ctx.json(Data.Stashpoints.encode(stashpoints)),\n      )\n    },\n  ),\n\n  rest.post<\n    {\n      readonly bagCount: number\n      readonly dateRange: Data.DateRangeEncoded\n      readonly stashpointId: string\n    },\n    never,\n    Data.PriceQuoteEncoded | { readonly error: { readonly code: string } }\n  >('/api/quotes', (req, res, ctx) => {\n    const { bagCount, dateRange: dateRangeEncoded, stashpointId } = req.body\n\n    if (!isBagCountValid(bagCount)) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(422),\n        ctx.json({ error: { code: 'INVALID_BAG_COUNT' } }),\n      )\n    }\n\n    const [error, dateRange] = Data.DateRange.decode(dateRangeEncoded)\n\n    if (error !== undefined || !isDateRangeValid(dateRange)) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(422),\n        ctx.json({ error: { code: 'INVALID_DATE_RANGE' } }),\n      )\n    }\n\n    const stashpoint = stashpoints.find(({ id }) => id === stashpointId)\n\n    if (stashpoint === undefined) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(404),\n        ctx.json({ error: { code: 'NOT_FOUND' } }),\n      )\n    }\n\n    const priceQuote = generatePriceQuote({ bagCount, dateRange, stashpoint })\n\n    return res(\n      ctx.delay('real'),\n      ctx.status(200),\n      ctx.json(Data.PriceQuote.encode(priceQuote)),\n    )\n  }),\n\n  rest.post<\n    {\n      readonly bagCount: number\n      readonly dateRange: Data.DateRangeEncoded\n      readonly stashpointId: string\n    },\n    never,\n    Data.BookingEncoded | { readonly error: { readonly code: string } }\n  >('/api/bookings', (req, res, ctx) => {\n    const { bagCount, dateRange: dateRangeEncoded, stashpointId } = req.body\n\n    if (!isBagCountValid(bagCount)) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(422),\n        ctx.json({ error: { code: 'INVALID_BAG_COUNT' } }),\n      )\n    }\n\n    const [error, dateRange] = Data.DateRange.decode(dateRangeEncoded)\n\n    if (error !== undefined || !isDateRangeValid(dateRange)) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(422),\n        ctx.json({ error: { code: 'INVALID_DATE_RANGE' } }),\n      )\n    }\n\n    const stashpoint = stashpoints.find(({ id }) => id === stashpointId)\n\n    if (stashpoint === undefined) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(404),\n        ctx.json({ error: { code: 'NOT_FOUND' } }),\n      )\n    }\n\n    const booking = generateBooking({ bagCount, dateRange, stashpoint })\n\n    bookings.push(booking)\n\n    return res(\n      ctx.delay('real'),\n      ctx.status(200),\n      ctx.json(Data.Booking.encode(booking)),\n    )\n  }),\n\n  rest.post<\n    { readonly bookingId: string },\n    never,\n    Data.PaymentEncoded | { readonly error: { readonly code: string } }\n  >('/api/payments', (req, res, ctx) => {\n    const { bookingId } = req.body\n\n    const booking = bookings.find(({ id }) => id === bookingId)\n\n    if (booking === undefined) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(404),\n        ctx.json({ error: { code: 'NOT_FOUND' } }),\n      )\n    }\n\n    return res(\n      ctx.delay('real'),\n      ctx.status(200),\n      ctx.json(Data.Payment.encode({ id: faker.datatype.uuid() })),\n    )\n  }),\n]\n\nexport const testHandlers = []\n"]},"metadata":{},"sourceType":"module"}