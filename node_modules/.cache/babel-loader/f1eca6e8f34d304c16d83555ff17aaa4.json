{"ast":null,"code":"import { addDays, isAfter as isDateAfter, isEqual as isDateEqual, isValid as isValidDate, startOfDay } from 'date-fns';\nexport const isBagCountValid = bagCount => {\n  return Number.isSafeInteger(bagCount) && bagCount >= 1 && bagCount <= 50;\n};\nexport const isDateRangeValid = dateRange => {\n  const minDateFrom = addDays(startOfDay(new Date()), 1);\n  const minDateTo = addDays(dateRange.from, 1);\n  return isValidDate(dateRange.from) && isValidDate(dateRange.to) && isDateEqual(dateRange.from, startOfDay(dateRange.from)) && isDateEqual(dateRange.to, startOfDay(dateRange.to)) && (isDateEqual(dateRange.from, minDateFrom) || isDateAfter(dateRange.from, minDateFrom)) && (isDateEqual(dateRange.to, minDateTo) || isDateAfter(dateRange.to, minDateTo));\n};","map":{"version":3,"sources":["/Users/mac/Documents/react app/stasher/src/util.ts"],"names":["addDays","isAfter","isDateAfter","isEqual","isDateEqual","isValid","isValidDate","startOfDay","isBagCountValid","bagCount","Number","isSafeInteger","isDateRangeValid","dateRange","minDateFrom","Date","minDateTo","from","to"],"mappings":"AAAA,SACEA,OADF,EAEEC,OAAO,IAAIC,WAFb,EAGEC,OAAO,IAAIC,WAHb,EAIEC,OAAO,IAAIC,WAJb,EAKEC,UALF,QAMO,UANP;AASA,OAAO,MAAMC,eAAe,GAAIC,QAAD,IAA+B;AAC5D,SAAOC,MAAM,CAACC,aAAP,CAAqBF,QAArB,KAAkCA,QAAQ,IAAI,CAA9C,IAAmDA,QAAQ,IAAI,EAAtE;AACD,CAFM;AAIP,OAAO,MAAMG,gBAAgB,GAAIC,SAAD,IAAwC;AACtE,QAAMC,WAAW,GAAGd,OAAO,CAACO,UAAU,CAAC,IAAIQ,IAAJ,EAAD,CAAX,EAAyB,CAAzB,CAA3B;AACA,QAAMC,SAAS,GAAGhB,OAAO,CAACa,SAAS,CAACI,IAAX,EAAiB,CAAjB,CAAzB;AAEA,SACEX,WAAW,CAACO,SAAS,CAACI,IAAX,CAAX,IACAX,WAAW,CAACO,SAAS,CAACK,EAAX,CADX,IAEAd,WAAW,CAACS,SAAS,CAACI,IAAX,EAAiBV,UAAU,CAACM,SAAS,CAACI,IAAX,CAA3B,CAFX,IAGAb,WAAW,CAACS,SAAS,CAACK,EAAX,EAAeX,UAAU,CAACM,SAAS,CAACK,EAAX,CAAzB,CAHX,KAICd,WAAW,CAACS,SAAS,CAACI,IAAX,EAAiBH,WAAjB,CAAX,IACCZ,WAAW,CAACW,SAAS,CAACI,IAAX,EAAiBH,WAAjB,CALb,MAMCV,WAAW,CAACS,SAAS,CAACK,EAAX,EAAeF,SAAf,CAAX,IACCd,WAAW,CAACW,SAAS,CAACK,EAAX,EAAeF,SAAf,CAPb,CADF;AAUD,CAdM","sourcesContent":["import {\n  addDays,\n  isAfter as isDateAfter,\n  isEqual as isDateEqual,\n  isValid as isValidDate,\n  startOfDay,\n} from 'date-fns'\nimport * as Data from './Data'\n\nexport const isBagCountValid = (bagCount: number): boolean => {\n  return Number.isSafeInteger(bagCount) && bagCount >= 1 && bagCount <= 50\n}\n\nexport const isDateRangeValid = (dateRange: Data.DateRange): boolean => {\n  const minDateFrom = addDays(startOfDay(new Date()), 1)\n  const minDateTo = addDays(dateRange.from, 1)\n\n  return (\n    isValidDate(dateRange.from) &&\n    isValidDate(dateRange.to) &&\n    isDateEqual(dateRange.from, startOfDay(dateRange.from)) &&\n    isDateEqual(dateRange.to, startOfDay(dateRange.to)) &&\n    (isDateEqual(dateRange.from, minDateFrom) ||\n      isDateAfter(dateRange.from, minDateFrom)) &&\n    (isDateEqual(dateRange.to, minDateTo) ||\n      isDateAfter(dateRange.to, minDateTo))\n  )\n}\n"]},"metadata":{},"sourceType":"module"}